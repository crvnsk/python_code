import math

fun = lambda x: 1 
if x == 1:
else:
    math.ceil(math.sinh(fun(x - 1)))
print(fun(5))

# код, который использует лямбда-функцию для определения рекурсивной
# последовательности # основанной на гиперболическом синусе. 
# Более конкретно, код вычисляет значение последовательности 
# # для x = 5 и выводит его на экран.
# Каждый элемент последовательности определяется как math.ceil(math.sinh(fun(x-1))),
# где math.sinh() - это гиперболический синус, а math.ceil() - это функция округления до ближайшего целого числа вверх.
# В первой итерации fun(5) вызывает fun(4), который вызывает fun(3), и так далее,
# до тех пор, пока не достигнется базовый случай, когда x=1. В этом случае функция возвращает 1.
# Затем каждый вызов функции возвращает результат math.ceil(math.sinh(fun(x-1))). Когда вызов fun(2) возвращается,
# он передается в вызов fun(3), который использует значение fun(2) для вычисления своего собственного значения.
# Этот процесс продолжается до тех пор, пока fun(5) не будет полностью вычислен.
# Результат этого вычисления - это значение последнего вызова fun(1) (равное 1), которое было передано наверх по стеку вызовов.
# Поскольку fun(1) - это базовый случай, который всегда возвращает 1, то результат вычисления для fun(5) равен 1.
